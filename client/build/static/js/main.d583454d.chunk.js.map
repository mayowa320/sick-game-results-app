{"version":3,"sources":["utils/mutations.js","components/AddCard.js","utils/queries.js","pages/SavedGames.js","components/Navbar.js","App.js","index.js"],"names":["SAVE_GAME","gql","REMOVE_GAME","AddCard","refetch","useMutation","saveGame","useState","editable","setEditable","description","date","game","location","scores","teams","record","setRecord","handleInput","event","target","key","name","value","Card","border","Body","Title","InputGroup","className","Text","Form","Control","onChange","aria-label","as","Button","onClick","variables","input","GET_RECORDS","SavedGames","useQuery","data","loading","removeRecord","handleDeleteGame","recordId","a","console","error","Jumbotron","fluid","Container","records","length","CardColumns","map","_id","join","AppNavbar","Navbar","bg","variant","expand","Brand","Link","to","Toggle","aria-controls","Collapse","id","Nav","App","client","ApolloClient","cache","InMemoryCache","uri","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d583454d.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const SAVE_GAME = gql`\n  mutation Mutation($input: RecordInput) {\n    saveRecord(input: $input)\n  }\n`;\nexport const REMOVE_GAME = gql`\n  mutation Mutation($recordId: String) {\n    removeRecord(recordId: $recordId)\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { SAVE_GAME } from \"../utils/mutations\";\nimport { useMutation } from \"@apollo/client\";\n\nexport default function AddCard({ refetch }) {\n  const [saveGame] = useMutation(SAVE_GAME);\n  let [editable, setEditable] = useState(false);\n  let [record, setRecord] = useState({\n    description: \"\",\n    date: \"\",\n    game: {\n      location: \"\",\n      scores: [0, 0],\n      teams: [0, 0],\n    },\n  });\n\n  function handleInput(event) {\n    let { name: key, value } = event.target;\n    switch (key) {\n      case \"team1\":\n        record.game.teams[0] = value;\n        break;\n      case \"team2\":\n        record.game.teams[1] = value;\n        break;\n      case \"score1\":\n        record.game.scores[0] = +value;\n        break;\n      case \"score2\":\n        record.game.scores[1] = +value;\n        break;\n      case \"location\":\n        record.game.location = value;\n        break;\n      default:\n        record[key] = value;\n    }\n    setRecord({ ...record });\n  }\n\n  function handleSave() {\n    saveGame({ variables: { input: record } });\n    refetch();\n    setEditable(false);\n  }\n  return (\n    <Card border=\"dark\">\n      {editable ? (\n        <Card.Body>\n          <Card.Title>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Text>Teams</InputGroup.Text>\n              <Form.Control\n                onChange={handleInput}\n                name=\"team1\"\n                aria-label=\"Team 1\"\n              />\n              <Form.Control\n                onChange={handleInput}\n                name=\"team2\"\n                aria-label=\"Team 2\"\n              />\n            </InputGroup>\n          </Card.Title>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Text>Date</InputGroup.Text>\n            <Form.Control\n              onChange={handleInput}\n              name=\"date\"\n              aria-label=\"Date\"\n            />\n          </InputGroup>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Text>Scores</InputGroup.Text>\n            <Form.Control\n              onChange={handleInput}\n              name=\"score1\"\n              aria-label=\"Score 1\"\n            />\n            <Form.Control\n              onChange={handleInput}\n              name=\"score2\"\n              aria-label=\"Score 2\"\n            />\n          </InputGroup>\n\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Text>Location</InputGroup.Text>\n            <Form.Control\n              onChange={handleInput}\n              name=\"location\"\n              aria-label=\"Location\"\n            />\n          </InputGroup>\n\n          <InputGroup>\n            <InputGroup.Text>Description</InputGroup.Text>\n            <Form.Control\n              as=\"textarea\"\n              name=\"description\"\n              onChange={handleInput}\n              aria-label=\"Description\"\n            />\n          </InputGroup>\n          <Button\n            className=\"btn-block btn-success\"\n            onClick={() => handleSave()}\n          >\n            Save this Record!\n          </Button>\n        </Card.Body>\n      ) : (\n        <Card.Body\n          className=\"text-center addCard\"\n          onClick={() => setEditable(true)}\n        >\n          <div>+</div>\n        </Card.Body>\n      )}\n      <style>{`\n              .addCard {\n                font-size: 146px;\n                font-weight: bold;\n              }\n              .addCard:hover {\n                background-color: var(--dark);\n                color: white;\n              }\n            `}</style>\n    </Card>\n  );\n}\n","import { gql } from \"@apollo/client\";\n\nexport const GET_RECORDS = gql`\n  query ExampleQuery {\n    records {\n      _id\n      description\n      date\n      game {\n        location\n        scores\n        teams\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport AddCard from \"../components/AddCard\";\n\n// import { removeBookId } from \"../utils/localStorage\";\nimport { GET_RECORDS } from \"../utils/queries\";\nimport { REMOVE_GAME } from \"../utils/mutations\";\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nconst SavedGames = () => {\n  const { data, loading, refetch } = useQuery(GET_RECORDS);\n\n  const [removeRecord] = useMutation(REMOVE_GAME);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteGame = async (recordId) => {\n    try {\n      const response = await removeRecord(recordId);\n\n      refetch();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  // if (!userDataLength) {\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved games!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {data.records.length\n            ? `Viewing ${data.records.length} saved ${\n                data.records.length === 1 ? \"game\" : \"games\"\n              }:`\n            : \"I have no saved games!\"}\n        </h2>\n        <CardColumns>\n          {data.records.map((record) => {\n            return (\n              <Card key={record._id} border=\"dark\">\n                <Card.Body>\n                  <Card.Title>{record.game.teams.join(\" vs \")}</Card.Title>\n                  <p className=\"small\">Date: {record.date}</p>\n                  <p className=\"small\">\n                    Scores: {record.game.scores.join(\":\")}\n                  </p>\n                  <p className=\"small\">Location: {record.game.location}</p>\n                  <Card.Text>{record.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteGame(record._id)}\n                  >\n                    Delete this Record!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n          <AddCard refetch={refetch} />\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedGames;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\n\nconst AppNavbar = () => {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Mayowa watched games memories\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For a Game\n              </Nav.Link>\n              <Nav.Link as={Link} to=\"/\">\n                See My Games\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// import SearchBooks from \"./pages/SearchBooks\";\nimport SavedGames from \"./pages/SavedGames\";\nimport Navbar from \"./components/Navbar\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nfunction App() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: \"/graphql\",\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            {/* <Route exact path=\"/\" component={SearchBooks} /> */}\n            <Route exact path=\"/\" component={SavedGames} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}